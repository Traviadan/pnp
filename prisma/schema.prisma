// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //provider = "sqlite"
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  email      String?     @unique
  password   String
  groups     Group[]
  sessions   Session[]
  characters Character[]
  favorite   Favorite[]
}

model Group {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Favorite {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
}

model CharacterNote {
  id          Int        @id @default(autoincrement())
  noteText    String
  Character   Character @relation(fields: [characterId], references: [id])
  characterId Int
}

model GearNote {
  id          Int       @id @default(autoincrement())
  noteText    String
  gear        Gear     @relation(fields: [gearId], references: [id])
  gearId      Int
}

model Character {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  metatypeId  String
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime    @default(now())
  finished    Boolean
  notes       CharacterNote[]
  attributes  Attribute[]
  skills      Skill[]
  favorite    Favorite[]
}

model Attribute {
  id              Int             @id @default(autoincrement())
  name            String
  value           Int
  valueMax        Int
  character       Character       @relation(fields: [characterId], references: [id])
  characterId     Int
}

model GameAttribute {
  id         String      @id
  shortname  String      @unique
  isDefault  Boolean
  skills     GameSkill[]
}

model Skill {
  id          Int       @id @default(autoincrement())
  skill       GameSkill @relation(fields: [skillId], references: [id])
  skillId     String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  value       Int
  valueMax    Int
}

model GameSkill {
  id                String         @id
  gameAttribute    GameAttribute   @relation(fields: [attributeId], references: [id])
  attributeId      String
  isDefault        Boolean         @default(true)
  GameSkillGroup   GameSkillGroup? @relation(fields: [gameSkillGroupId], references: [id])
  gameSkillGroupId String?
  skills           Skill[]
}

model GameSkillGroup {
  id          String      @id
  description String?
  gameSkills  GameSkill[]
}

model Gear {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  gameGear    GameGear  @relation(fields: [gameGearId], references: [id])
  gameGearId  Int
  notes       GearNote[]    
}

model GameGear {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String      @unique
  level         Int?
  capacitiy     Int?
  legal         Boolean
  restricted    Boolean
  availability  Int?
  gears       Gear[]
}